import tkinter as tk
from tkinter import messagebox, ttk

# Knapsack Dynamic Programming Function
def knapsack_dp(weights, values, capacity):
    n = len(values)
    dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]
    for i in range(n + 1):
        for w in range(capacity + 1):
            if i == 0 or w == 0:
                dp[i][w] = 0
            elif weights[i-1] <= w:
                dp[i][w] = max(values[i-1] + dp[i-1][w - weights[i-1]], dp[i-1][w])
            else:
                dp[i][w] = dp[i-1][w]
    return dp[n][capacity]

# Function to get the optimal packing
def get_optimal_packing():
    items = []
    for i in range(len(item_names)):
        if item_names[i]:
            items.append((item_names[i], weights[i], values[i]))
    
    capacity = capacity_entry.get()
    if not capacity.isdigit() or int(capacity) <= 0:
        messagebox.showerror("Input Error", "Capacity must be a positive integer.")
        return
    
    capacity = int(capacity)
    
    # Prepare lists for knapsack function
    weight_list = [item[1] for item in items]
    value_list = [item[2] for item in items]

    max_value = knapsack_dp(weight_list, value_list, capacity)
    
    messagebox.showinfo("Result", f"Max Value Possible: {max_value}")

# Clear the item list
def clear_items():
    item_names.clear()
    weights.clear()
    values.clear()
    item_listbox.delete(0, tk.END)

# GUI Setup
root = tk.Tk()
root.title("Smart Packing Assistant")
root.geometry("400x400")
root.configure(bg="#f0f0f0")

item_names = []
weights = []
values = []

def add_item():
    name = item_name_entry.get()
    weight = item_weight_entry.get()
    value = item_value_entry.get()
    
    if not name or not weight.isdigit() or not value.isdigit():
        messagebox.showerror("Input Error", "Please provide valid item details.")
        return
    
    weight = int(weight)
    value = int(value)
    
    item_names.append(name)
    weights.append(weight)
    values.append(value)
    
    item_name_entry.delete(0, tk.END)
    item_weight_entry.delete(0, tk.END)
    item_value_entry.delete(0, tk.END)

    item_listbox.insert(tk.END, f"{name}: Weight={weight}, Value={value}")

# Create frames for organization
input_frame = tk.Frame(root, bg="#f0f0f0")
input_frame.pack(pady=10)

item_name_label = tk.Label(input_frame, text="Item Name:", bg="#f0f0f0")
item_name_label.grid(row=0, column=0, padx=5, pady=5)
item_name_entry = tk.Entry(input_frame)
item_name_entry.grid(row=0, column=1, padx=5, pady=5)

item_weight_label = tk.Label(input_frame, text="Weight:", bg="#f0f0f0")
item_weight_label.grid(row=1, column=0, padx=5, pady=5)
item_weight_entry = tk.Entry(input_frame)
item_weight_entry.grid(row=1, column=1, padx=5, pady=5)

item_value_label = tk.Label(input_frame, text="Value:", bg="#f0f0f0")
item_value_label.grid(row=2, column=0, padx=5, pady=5)
item_value_entry = tk.Entry(input_frame)
item_value_entry.grid(row=2, column=1, padx=5, pady=5)

tk.Button(input_frame, text="Add Item", command=add_item).grid(row=3, columnspan=2, pady=10)

capacity_label = tk.Label(root, text="Enter Maximum Weight Capacity:", bg="#f0f0f0")
capacity_label.pack(pady=5)
capacity_entry = tk.Entry(root)
capacity_entry.pack(pady=5)

tk.Button(root, text="Calculate Optimal Packing", command=get_optimal_packing, bg="#4CAF50", fg="white").pack(pady=5)
tk.Button(root, text="Clear Items", command=clear_items, bg="#f44336", fg="white").pack(pady=5)

item_listbox = tk.Listbox(root, width=50, height=10)
item_listbox.pack(pady=10)

# Configure scrollbar
scrollbar = tk.Scrollbar(root)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
item_listbox.config(yscrollcommand=scrollbar.set)
scrollbar.config(command=item_listbox.yview)

root.mainloop()
